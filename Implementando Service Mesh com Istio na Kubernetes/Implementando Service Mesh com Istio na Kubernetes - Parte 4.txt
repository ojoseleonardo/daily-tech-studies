O Istio usa objetos **VirtualService** e **DestinationRule** para definir regras de roteamento avançado. Por exemplo, para realizar um **canary deployment** de 10% do tráfego: 🎯🔀

```yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: checkout
spec:
  hosts:
  - checkout
  http:
  - route:
    - destination:
        host: checkout
        subset: v1
      weight: 90
    - destination:
        host: checkout
        subset: v2
      weight: 10
```

▸ **Resiliência**  
  → **Circuit Breaker**: limite de conexões simultâneas.  
  → **Retry**: número máximo de tentativas e timeout.  

→ **Exemplo de DestinationRule com circuit breaker**:

```yaml
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: checkout-dr
spec:
  host: checkout
  subsets:
  - name: v1
    labels:
      version: v1
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 100
    outlierDetection:
      consecutive5xxErrors: 1
      interval: 1s
      baseEjectionTime: 30s
```

Essas configurações garantem que falhas em um serviço não se propaguem, aumentando a robustez do sistema.  

═══════════════════